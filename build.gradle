import java.text.SimpleDateFormat

allprojects {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Load Gradle plugins
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    apply plugin: 'maven-publish'  // Plugin to publish artifacts to a maven repo

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Global variables
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    apply from:  rootProject.file("versions.gradle")

    group = "com.r3.conclave"
    version = conclave_graal_version

    ext {

        // Environment variables loaded from the system
        // Add any environment variable to the argument list if it needs to be accessible by Gradle
        environment = getEnvironmentVariables(
                'OBLIVIUM_MAVEN_USERNAME',
                'OBLIVIUM_MAVEN_PASSWORD',
                'OBLIVIUM_CONTAINER_REGISTRY_URL',
                'MX_HOME',
                'DOCKER_CONTAINER_IS_RUNNING'
        )

        // Directories and files paths
        tempDir = "${rootProject.buildDir}/tmp"
        graalDir = "$tempDir/graal"

        // These files are used as a dummy outputs in place of the graalvm repository directory.
        // This prevents buildGraal from re-triggering cloneAndPatchRepository.
        graalCloneDummy = "$tempDir/graal_cloned_time"
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Tasks
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    task clean(type: Delete) {

        // Task details
        group = 'Build'
        description = 'Deletes the build directory.'

        doFirst {
            delete buildDir
        }
    }

    task cloneAndPatchGraal(type: Exec) {

        // Task details
        group = 'Other'
        description = 'Clones a specific version of Graal and patches the source code with the required changes for Conclave.'

        def patchingScript = "${rootProject.projectDir}/scripts/cloneAndPatch.sh"
        def graalPatch = "${rootProject.projectDir}/patches/graal.patch"

        inputs.files("$patchingScript", "$graalPatch")
        outputs.files("$graalCloneDummy")

        doFirst {
            mkdir tempDir
            workingDir tempDir
            commandLine "$patchingScript", "$graal_version", "$graal_commit_id"
            //commandLine "ls"

            // Write current date to graal clone dummy file. If this task is run again, the content of this file
            // will change and subsequent tasks will run.
            writeDateToFile(graalCloneDummy)
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // Maven-publish - Configuration for publishing maven artifacts
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    publishing {
        // List of repositories where the artifact is published
        repositories {

            // Artifactory repository
            maven {
                name = "artifactory"
                url = getArtifactoryForPublication()
                credentials {
                    username = environment.OBLIVIUM_MAVEN_USERNAME
                    password = environment.OBLIVIUM_MAVEN_PASSWORD
                }
            }

            // Local repository - Useful for testing purposes
            maven {
                name = "build"
                url = "$buildDir/repo"
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper functions
////////////////////////////////////////////////////////////////////////////////////////////////////

// The function loads the environments variables from the system
// Input: List of all environment variables that should be loaded by Gradle
// Output: A map with the environment variables that were requested
// Key of the map: environment variable name
// Value of the map: environment variable value
static Map<String, String> getEnvironmentVariables(String... envNames) {
    return envNames.collectEntries {envName -> [(envName): System.getenv(envName)] }
}

String getArtifactoryForPublication() {
    def mavenDevRepositoryPath = 'conclave-maven-dev'
    def mavenReleaseRepositoryPath = 'conclave-maven-release'
    def useDevRepository = conclave_graal_version.endsWith("-SNAPSHOT") || conclave_graal_version.matches(/.+\-RC[0-9]+$/)
    def repositoryPath = useDevRepository ? mavenDevRepositoryPath : mavenReleaseRepositoryPath
    return "https://software.r3.com/artifactory/" + repositoryPath
}

// Writes the current date and time to a file
def writeDateToFile(String fileName) {
    new File(fileName).text = "${new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())}\n"
}

// Ensure that a given task is being run inside the provided container by throwing an exception
// if that is not the case.
def assertDockerContainerIsBeingUsed() {
    if(environment.DOCKER_CONTAINER_IS_RUNNING != "TRUE") {
        String message = "It was detected that the task is not being run inside the provided docker container.\n" +
                "This might lead to unexpected errors if your system is not properly configured.\n" +
                "Please consider running the task inside the provided docker container by running the script ./scripts/devenv_shell.sh first"

        throw new GradleException(message)
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Global variables
////////////////////////////////////////////////////////////////////////////////////////////////////
ext {
    // Directories and files paths
    graalVMLatestDir = "$graalDir/vm/latest_graalvm/"
    graalVMTar = "$buildDir/distributions/graalvm.tar.gz"
    graalVMDir = "" // This variable is set once the directory is created. This is because the name of the directory depends on the Graal version

    // These files are used as a dummy outputs in place of the graalvm repository directory.
    // This prevents buildGraal from re-triggering cloneAndPatchRepository.
    graalBuildDummy = "$tempDir/graal_built_time"
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Tasks
////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * From the instructions on the README.md at https://github.com/oracle/graal/tree/vm-20.1.0/vm
 *
 * The components that can be included or excluded during the graalvm build:
 * Components:
 * - GraalVM compiler ('cmp', /graal)
 * - Truffle ('tfl', /truffle)
 * - Component installer ('gu', /installer)
 * - SubstrateVM ('svm', /svm)
 * - Native Image licence files ('nil', /svm)
 * - Native Image ('ni', /svm)
 * - TRegex ('rgx', /regex)
 * - Polyglot Native API ('polynative', /polyglot)
 * - LLVM.org toolchain ('llp', /llvm)
 * - GraalVM license files ('gvm', /.)
 * - Truffle NFI ('nfi', /nfi)
 * - Truffle Macro ('tflm', /truffle)
 * - SubstrateVM LLVM ('svml', /svm)
 * - Polyglot Launcher ('poly', /polyglot)
 * - Native Image JUnit ('nju', /junit)
 * - Native Image Configure Tool ('nic', /svm)
 * - Graal.js ('js', /js)
 * - LibGraal ('lg', /False)
 * - Graal SDK ('sdk', /graalvm)
 * - Polyglot Library ('libpoly', /polyglot)
 * Launchers:
 * - gu (native)
 * - native-image (native)
 * - polyglot (native)
 * - native-image-configure (native)
 * - js (native)
 */
task buildGraal() {
    dependsOn cloneAndPatchGraal

    // Task details
    group = 'Build'
    description = 'Compiles the source code of Graal. For testing purposes consider using the property -PexcludeDynamicLanguages to run the task faster by excluding all dynamic languages such as Javascript and Pythonn.'

    //  This property can be used to speed up an SDK build when no dynamic languages are needed
    def excludeDynamicLanguages = findProperty('excludeDynamicLanguages')

    // Register graal repository dummy file as an input and repository directory as output
    inputs.files(graalCloneDummy)
    outputs.files(graalBuildDummy)

    doFirst {

        assertDockerContainerIsBeingUsed()

        // The --force-bash-launchers makes the build faster and use far less RAM by skipping the native-imaging of
        // some tools we don't use or care about. Without that flag the build can fail due to running out of RAM.
        exec {
            String dynamicImportsArgs = "/substratevm"
            String forceBashLaunchersArgs = "polybench"

            if (excludeDynamicLanguages == null) {
                dynamicImportsArgs = "$dynamicImportsArgs,graalpython,graal-js"
                forceBashLaunchersArgs = "$forceBashLaunchersArgs,python,js"
            }

            workingDir "$graalDir/vm"
            commandLine "${System.getenv('MX_HOME')}/mx", "--skip-libraries=polyglot", "--dynamicimports", "$dynamicImportsArgs",
                    "--exclude-components=nju,nic,llp,lg,gu,polynative,gvm,poly,nil,svml", "--force-bash-launchers=$forceBashLaunchersArgs", "build"
        }
        graalVMDir = findGraalVMDir(graalVMLatestDir)
        generatePlaceholderLibraries(graalVMDir)
    }

    doLast {
        // Write current date to graal build dummy file. If this task is run again, the content of this file
        // will change and subsequent tasks will run.
        writeDateToFile(graalBuildDummy)
    }
}

/**
 * The command line util `tar` is being used rather Gradle's Tar task due to
 * https://github.com/gradle/gradle/issues/3982, which describes symlinks being followed
 * rather than preserved. Graal fails to run with the resolved symlinks.
 */
task tarGraal(type: Exec) {
    dependsOn buildGraal

    // Task details
    group = 'Other'
    description = 'Generate graalvm.tar file.'

    // Set the input to the folder in which the build is generated. We actually want to tar the only subdirectory from this.
    inputs.dir(graalVMLatestDir)
    outputs.file(graalVMTar)

    doFirst {
        commandLine 'tar', 'czf', graalVMTar, '-C', graalVMDir, '.'
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Maven-publish - Configuration for publishing maven artifacts
////////////////////////////////////////////////////////////////////////////////////////////////////
publishing {
    // List of artifacts to publish
    publications {

        // Publish the tar file that contains graal
        maven(MavenPublication) {

            // Artifact to be published
            artifact(graalVMTar) {
                extension 'tar.gz'
                builtBy(tarGraal)

                // Details about the artifact being published
                artifactId = "graalvm"
                description = 'Graal distribution including SubstrateVM and tools'
            }

            pom {
                licenses {
                    license {
                        name = 'GNU General Public License, version 2, with the Classpath Exception'
                        url = 'https://github.com/R3Conclave/graal-patches/blob/HEAD/LICENSE'
                    }
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper functions
////////////////////////////////////////////////////////////////////////////////////////////////////
// Please do not call this function to get the GraalVMDir. Use the property GraalVMDir instead
// This function should only be called once and as soon as the graalvm directory is created by the mx tool.
// And it was created because the name of the directory changes between different Graal versions
def findGraalVMDir(String graalVMLatestDir) {
    String graalVMDir = ""
    file(graalVMLatestDir).eachDirMatch(~/graalvm-.*/) {file -> graalVMDir=file.path }

    assert !graalVMDir.isBlank() && !graalVMDir.isEmpty() : "Failed to find graalvm directory built by the mx tool"

    return graalVMDir
}

/**
 * SubstrateVM can add required native libraries during compilation based on parameters to
 * native-image. For example, the inclusion of --enable-all-security-services results in native-image
 * automatically including libstdc++.a during linking. We link against the SGX trusted runtime to
 * satisfy the linker so to prevent multiply derived symbols we need to provide placeholder, empty
 * implementations of any automatically linked library. This function populates the placeholderlibs/
 * directory with these files and https://github.com/R3Conclave/conclave-sdk/blob/master/plugin-enclave-gradle/src/main/kotlin/com/r3/conclave/plugin/enclave/gradle/NativeImage.kt
 * adds this directory to the link path
 */
def generatePlaceholderLibraries(String graalVMDir) {
    assert !graalVMDir.isBlank() && !graalVMDir.isEmpty() : "GraalVMDir must not be empty"

    exec {
        String placeholderDir = graalVMDir + "/placeholderlibs/"

        // Create the directory
        mkdir placeholderDir

        // Create an empty archive
        commandLine 'ar', "cr", placeholderDir + "libstdc++.a"
    }
}